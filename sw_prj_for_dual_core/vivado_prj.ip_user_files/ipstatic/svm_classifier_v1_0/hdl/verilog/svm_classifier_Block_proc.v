// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module svm_classifier_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_dout,
        in_V_empty_n,
        in_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_4F = 32'b1001111;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv32_6F = 32'b1101111;
parameter    ap_const_lv32_73 = 32'b1110011;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv32_83 = 32'b10000011;
parameter    ap_const_lv32_8F = 32'b10001111;
parameter    ap_const_lv32_93 = 32'b10010011;
parameter    ap_const_lv32_9F = 32'b10011111;
parameter    ap_const_lv32_A3 = 32'b10100011;
parameter    ap_const_lv32_AF = 32'b10101111;
parameter    ap_const_lv32_B3 = 32'b10110011;
parameter    ap_const_lv32_BF = 32'b10111111;
parameter    ap_const_lv32_C3 = 32'b11000011;
parameter    ap_const_lv32_CF = 32'b11001111;
parameter    ap_const_lv32_D3 = 32'b11010011;
parameter    ap_const_lv32_DF = 32'b11011111;
parameter    ap_const_lv32_E3 = 32'b11100011;
parameter    ap_const_lv32_EF = 32'b11101111;
parameter    ap_const_lv32_F3 = 32'b11110011;
parameter    ap_const_lv32_FF = 32'b11111111;
parameter    ap_const_lv13_0 = 13'b0000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] in_V_dout;
input   in_V_empty_n;
output   in_V_read;
output  [12:0] ap_return_0;
output  [12:0] ap_return_1;
output  [12:0] ap_return_2;
output  [12:0] ap_return_3;
output  [12:0] ap_return_4;
output  [12:0] ap_return_5;
output  [12:0] ap_return_6;
output  [12:0] ap_return_7;
output  [12:0] ap_return_8;
output  [12:0] ap_return_9;
output  [12:0] ap_return_10;
output  [12:0] ap_return_11;
output  [12:0] ap_return_12;
output  [12:0] ap_return_13;
output  [12:0] ap_return_14;
output  [12:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_read;
reg[12:0] ap_return_0;
reg[12:0] ap_return_1;
reg[12:0] ap_return_2;
reg[12:0] ap_return_3;
reg[12:0] ap_return_4;
reg[12:0] ap_return_5;
reg[12:0] ap_return_6;
reg[12:0] ap_return_7;
reg[12:0] ap_return_8;
reg[12:0] ap_return_9;
reg[12:0] ap_return_10;
reg[12:0] ap_return_11;
reg[12:0] ap_return_12;
reg[12:0] ap_return_13;
reg[12:0] ap_return_14;
reg[12:0] ap_return_15;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    in_V_blk_n;
reg    ap_sig_54;
reg   [12:0] ap_return_0_preg;
reg   [12:0] ap_return_1_preg;
reg   [12:0] ap_return_2_preg;
reg   [12:0] ap_return_3_preg;
reg   [12:0] ap_return_4_preg;
reg   [12:0] ap_return_5_preg;
reg   [12:0] ap_return_6_preg;
reg   [12:0] ap_return_7_preg;
reg   [12:0] ap_return_8_preg;
reg   [12:0] ap_return_9_preg;
reg   [12:0] ap_return_10_preg;
reg   [12:0] ap_return_11_preg;
reg   [12:0] ap_return_12_preg;
reg   [12:0] ap_return_13_preg;
reg   [12:0] ap_return_14_preg;
reg   [12:0] ap_return_15_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 ap_return_0_preg = 13'b0000000000000;
#0 ap_return_1_preg = 13'b0000000000000;
#0 ap_return_2_preg = 13'b0000000000000;
#0 ap_return_3_preg = 13'b0000000000000;
#0 ap_return_4_preg = 13'b0000000000000;
#0 ap_return_5_preg = 13'b0000000000000;
#0 ap_return_6_preg = 13'b0000000000000;
#0 ap_return_7_preg = 13'b0000000000000;
#0 ap_return_8_preg = 13'b0000000000000;
#0 ap_return_9_preg = 13'b0000000000000;
#0 ap_return_10_preg = 13'b0000000000000;
#0 ap_return_11_preg = 13'b0000000000000;
#0 ap_return_12_preg = 13'b0000000000000;
#0 ap_return_13_preg = 13'b0000000000000;
#0 ap_return_14_preg = 13'b0000000000000;
#0 ap_return_15_preg = 13'b0000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_0_preg <= {{in_V_dout[ap_const_lv32_F : ap_const_lv32_3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_10_preg <= {{in_V_dout[ap_const_lv32_AF : ap_const_lv32_A3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_11_preg <= {{in_V_dout[ap_const_lv32_BF : ap_const_lv32_B3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_12_preg <= {{in_V_dout[ap_const_lv32_CF : ap_const_lv32_C3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_13_preg <= {{in_V_dout[ap_const_lv32_DF : ap_const_lv32_D3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_14_preg <= {{in_V_dout[ap_const_lv32_EF : ap_const_lv32_E3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_15_preg <= {{in_V_dout[ap_const_lv32_FF : ap_const_lv32_F3]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_1_preg <= {{in_V_dout[ap_const_lv32_1F : ap_const_lv32_13]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_2_preg <= {{in_V_dout[ap_const_lv32_2F : ap_const_lv32_23]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_3_preg <= {{in_V_dout[ap_const_lv32_3F : ap_const_lv32_33]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_4_preg <= {{in_V_dout[ap_const_lv32_4F : ap_const_lv32_43]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_5_preg <= {{in_V_dout[ap_const_lv32_5F : ap_const_lv32_53]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_6_preg <= {{in_V_dout[ap_const_lv32_6F : ap_const_lv32_63]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_7_preg <= {{in_V_dout[ap_const_lv32_7F : ap_const_lv32_73]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_8_preg <= {{in_V_dout[ap_const_lv32_8F : ap_const_lv32_83]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= ap_const_lv13_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
            ap_return_9_preg <= {{in_V_dout[ap_const_lv32_9F : ap_const_lv32_93]}};
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_0 = {{in_V_dout[ap_const_lv32_F : ap_const_lv32_3]}};
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_1 = {{in_V_dout[ap_const_lv32_1F : ap_const_lv32_13]}};
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_10 = {{in_V_dout[ap_const_lv32_AF : ap_const_lv32_A3]}};
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_11 = {{in_V_dout[ap_const_lv32_BF : ap_const_lv32_B3]}};
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_12 = {{in_V_dout[ap_const_lv32_CF : ap_const_lv32_C3]}};
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_13 = {{in_V_dout[ap_const_lv32_DF : ap_const_lv32_D3]}};
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_14 = {{in_V_dout[ap_const_lv32_EF : ap_const_lv32_E3]}};
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_15 = {{in_V_dout[ap_const_lv32_FF : ap_const_lv32_F3]}};
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_2 = {{in_V_dout[ap_const_lv32_2F : ap_const_lv32_23]}};
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_3 = {{in_V_dout[ap_const_lv32_3F : ap_const_lv32_33]}};
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_4 = {{in_V_dout[ap_const_lv32_4F : ap_const_lv32_43]}};
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_5 = {{in_V_dout[ap_const_lv32_5F : ap_const_lv32_53]}};
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_6 = {{in_V_dout[ap_const_lv32_6F : ap_const_lv32_63]}};
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_7 = {{in_V_dout[ap_const_lv32_7F : ap_const_lv32_73]}};
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_8 = {{in_V_dout[ap_const_lv32_8F : ap_const_lv32_83]}};
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        ap_return_9 = {{in_V_dout[ap_const_lv32_9F : ap_const_lv32_93]}};
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        in_V_blk_n = in_V_empty_n;
    end else begin
        in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_54)) begin
        in_V_read = 1'b1;
    end else begin
        in_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_54 = ((in_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //svm_classifier_Block_proc
