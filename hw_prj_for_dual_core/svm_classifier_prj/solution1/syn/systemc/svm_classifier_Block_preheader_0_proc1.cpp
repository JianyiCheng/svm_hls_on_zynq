// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "svm_classifier_Block_preheader_0_proc1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic svm_classifier_Block_preheader_0_proc1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic svm_classifier_Block_preheader_0_proc1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> svm_classifier_Block_preheader_0_proc1::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> svm_classifier_Block_preheader_0_proc1::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> svm_classifier_Block_preheader_0_proc1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> svm_classifier_Block_preheader_0_proc1::ap_const_lv1_1 = "1";
const sc_lv<32> svm_classifier_Block_preheader_0_proc1::ap_const_lv32_1 = "1";
const sc_lv<1> svm_classifier_Block_preheader_0_proc1::ap_const_lv1_0 = "0";
const sc_lv<19> svm_classifier_Block_preheader_0_proc1::ap_const_lv19_E758 = "1110011101011000";
const sc_lv<32> svm_classifier_Block_preheader_0_proc1::ap_const_lv32_12 = "10010";

svm_classifier_Block_preheader_0_proc1::svm_classifier_Block_preheader_0_proc1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_43);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_55 );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( out_r_preg );
    sensitive << ( r_V_fu_142_p2 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_p_Val2_80_8_fu_132_p2);
    sensitive << ( tmp11_fu_127_p2 );
    sensitive << ( tmp_fu_115_p2 );

    SC_METHOD(thread_r_V_fu_142_p2);
    sensitive << ( tmp_15_fu_138_p1 );

    SC_METHOD(thread_tmp10_fu_109_p2);
    sensitive << ( p_read2 );
    sensitive << ( p_read3 );

    SC_METHOD(thread_tmp11_fu_127_p2);
    sensitive << ( tmp13_reg_157 );
    sensitive << ( tmp12_fu_121_p2 );

    SC_METHOD(thread_tmp12_fu_121_p2);
    sensitive << ( p_read4 );
    sensitive << ( p_read5 );

    SC_METHOD(thread_tmp13_fu_97_p2);
    sensitive << ( p_read6 );
    sensitive << ( tmp14_fu_91_p2 );

    SC_METHOD(thread_tmp14_fu_91_p2);
    sensitive << ( p_read7 );
    sensitive << ( p_read8 );

    SC_METHOD(thread_tmp9_fu_103_p2);
    sensitive << ( p_read );
    sensitive << ( p_read1 );

    SC_METHOD(thread_tmp_15_fu_138_p1);
    sensitive << ( p_Val2_80_8_fu_132_p2 );

    SC_METHOD(thread_tmp_fu_115_p2);
    sensitive << ( tmp10_fu_109_p2 );
    sensitive << ( tmp9_fu_103_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_43 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    out_r_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "svm_classifier_Block_preheader_0_proc1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, tmp13_fu_97_p2, "tmp13_fu_97_p2");
    sc_trace(mVcdFile, tmp13_reg_157, "tmp13_reg_157");
    sc_trace(mVcdFile, ap_sig_43, "ap_sig_43");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_55, "ap_sig_55");
    sc_trace(mVcdFile, out_r_preg, "out_r_preg");
    sc_trace(mVcdFile, tmp14_fu_91_p2, "tmp14_fu_91_p2");
    sc_trace(mVcdFile, tmp10_fu_109_p2, "tmp10_fu_109_p2");
    sc_trace(mVcdFile, tmp9_fu_103_p2, "tmp9_fu_103_p2");
    sc_trace(mVcdFile, tmp12_fu_121_p2, "tmp12_fu_121_p2");
    sc_trace(mVcdFile, tmp11_fu_127_p2, "tmp11_fu_127_p2");
    sc_trace(mVcdFile, tmp_fu_115_p2, "tmp_fu_115_p2");
    sc_trace(mVcdFile, p_Val2_80_8_fu_132_p2, "p_Val2_80_8_fu_132_p2");
    sc_trace(mVcdFile, tmp_15_fu_138_p1, "tmp_15_fu_138_p1");
    sc_trace(mVcdFile, r_V_fu_142_p2, "r_V_fu_142_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

svm_classifier_Block_preheader_0_proc1::~svm_classifier_Block_preheader_0_proc1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void svm_classifier_Block_preheader_0_proc1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_r_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            out_r_preg = r_V_fu_142_p2.read().range(18, 18);
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_43.read())) {
        tmp13_reg_157 = tmp13_fu_97_p2.read();
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_sig_43() {
    ap_sig_43 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_sig_55() {
    ap_sig_55 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_55.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_out_r() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        out_r = r_V_fu_142_p2.read().range(18, 18);
    } else {
        out_r = out_r_preg.read();
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_out_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void svm_classifier_Block_preheader_0_proc1::thread_p_Val2_80_8_fu_132_p2() {
    p_Val2_80_8_fu_132_p2 = (!tmp11_fu_127_p2.read().is_01() || !tmp_fu_115_p2.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp11_fu_127_p2.read()) + sc_biguint<18>(tmp_fu_115_p2.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_r_V_fu_142_p2() {
    r_V_fu_142_p2 = (!tmp_15_fu_138_p1.read().is_01() || !ap_const_lv19_E758.is_01())? sc_lv<19>(): (sc_bigint<19>(tmp_15_fu_138_p1.read()) + sc_biguint<19>(ap_const_lv19_E758));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp10_fu_109_p2() {
    tmp10_fu_109_p2 = (!p_read2.read().is_01() || !p_read3.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_read2.read()) + sc_biguint<18>(p_read3.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp11_fu_127_p2() {
    tmp11_fu_127_p2 = (!tmp13_reg_157.read().is_01() || !tmp12_fu_121_p2.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp13_reg_157.read()) + sc_biguint<18>(tmp12_fu_121_p2.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp12_fu_121_p2() {
    tmp12_fu_121_p2 = (!p_read4.read().is_01() || !p_read5.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_read4.read()) + sc_biguint<18>(p_read5.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp13_fu_97_p2() {
    tmp13_fu_97_p2 = (!tmp14_fu_91_p2.read().is_01() || !p_read6.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp14_fu_91_p2.read()) + sc_biguint<18>(p_read6.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp14_fu_91_p2() {
    tmp14_fu_91_p2 = (!p_read7.read().is_01() || !p_read8.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_read7.read()) + sc_biguint<18>(p_read8.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp9_fu_103_p2() {
    tmp9_fu_103_p2 = (!p_read1.read().is_01() || !p_read.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_read1.read()) + sc_biguint<18>(p_read.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp_15_fu_138_p1() {
    tmp_15_fu_138_p1 = esl_sext<19,18>(p_Val2_80_8_fu_132_p2.read());
}

void svm_classifier_Block_preheader_0_proc1::thread_tmp_fu_115_p2() {
    tmp_fu_115_p2 = (!tmp10_fu_109_p2.read().is_01() || !tmp9_fu_103_p2.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp10_fu_109_p2.read()) + sc_biguint<18>(tmp9_fu_103_p2.read()));
}

void svm_classifier_Block_preheader_0_proc1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_43.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

