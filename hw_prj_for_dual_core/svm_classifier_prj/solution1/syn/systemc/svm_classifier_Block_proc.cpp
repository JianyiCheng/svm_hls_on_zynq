// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "svm_classifier_Block_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic svm_classifier_Block_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic svm_classifier_Block_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> svm_classifier_Block_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> svm_classifier_Block_proc::ap_const_lv1_1 = "1";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_3 = "11";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_F = "1111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_13 = "10011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_1F = "11111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_23 = "100011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_2F = "101111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_33 = "110011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_3F = "111111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_43 = "1000011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_4F = "1001111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_53 = "1010011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_5F = "1011111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_63 = "1100011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_6F = "1101111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_73 = "1110011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_7F = "1111111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_83 = "10000011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_8F = "10001111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_93 = "10010011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_9F = "10011111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_A3 = "10100011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_AF = "10101111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_B3 = "10110011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_BF = "10111111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_C3 = "11000011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_CF = "11001111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_D3 = "11010011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_DF = "11011111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_E3 = "11100011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_EF = "11101111";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_F3 = "11110011";
const sc_lv<32> svm_classifier_Block_proc::ap_const_lv32_FF = "11111111";
const sc_lv<13> svm_classifier_Block_proc::ap_const_lv13_0 = "0000000000000";

svm_classifier_Block_proc::svm_classifier_Block_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_54 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_54 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_12_preg );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_13_preg );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_14_preg );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_15_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_dout );
    sensitive << ( ap_sig_54 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_ap_sig_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_54);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_empty_n );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_19 );

    SC_METHOD(thread_in_V_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( in_V_empty_n );

    SC_METHOD(thread_in_V_read);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_54 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_54 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_return_0_preg = "0000000000000";
    ap_return_1_preg = "0000000000000";
    ap_return_2_preg = "0000000000000";
    ap_return_3_preg = "0000000000000";
    ap_return_4_preg = "0000000000000";
    ap_return_5_preg = "0000000000000";
    ap_return_6_preg = "0000000000000";
    ap_return_7_preg = "0000000000000";
    ap_return_8_preg = "0000000000000";
    ap_return_9_preg = "0000000000000";
    ap_return_10_preg = "0000000000000";
    ap_return_11_preg = "0000000000000";
    ap_return_12_preg = "0000000000000";
    ap_return_13_preg = "0000000000000";
    ap_return_14_preg = "0000000000000";
    ap_return_15_preg = "0000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "svm_classifier_Block_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_19, "ap_sig_19");
    sc_trace(mVcdFile, in_V_blk_n, "in_V_blk_n");
    sc_trace(mVcdFile, ap_sig_54, "ap_sig_54");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_return_12_preg, "ap_return_12_preg");
    sc_trace(mVcdFile, ap_return_13_preg, "ap_return_13_preg");
    sc_trace(mVcdFile, ap_return_14_preg, "ap_return_14_preg");
    sc_trace(mVcdFile, ap_return_15_preg, "ap_return_15_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

svm_classifier_Block_proc::~svm_classifier_Block_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void svm_classifier_Block_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !ap_sig_54.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_0_preg = in_V_dout.read().range(15, 3);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_10_preg = in_V_dout.read().range(175, 163);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_11_preg = in_V_dout.read().range(191, 179);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_12_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_12_preg = in_V_dout.read().range(207, 195);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_13_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_13_preg = in_V_dout.read().range(223, 211);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_14_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_14_preg = in_V_dout.read().range(239, 227);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_15_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_15_preg = in_V_dout.read().range(255, 243);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_1_preg = in_V_dout.read().range(31, 19);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_2_preg = in_V_dout.read().range(47, 35);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_3_preg = in_V_dout.read().range(63, 51);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_4_preg = in_V_dout.read().range(79, 67);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_5_preg = in_V_dout.read().range(95, 83);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_6_preg = in_V_dout.read().range(111, 99);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_7_preg = in_V_dout.read().range(127, 115);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_8_preg = in_V_dout.read().range(143, 131);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !ap_sig_54.read())) {
            ap_return_9_preg = in_V_dout.read().range(159, 147);
        }
    }
}

void svm_classifier_Block_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_54.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void svm_classifier_Block_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void svm_classifier_Block_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void svm_classifier_Block_proc::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_0 = in_V_dout.read().range(15, 3);
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_1 = in_V_dout.read().range(31, 19);
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_10() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_10 = in_V_dout.read().range(175, 163);
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_11() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_11 = in_V_dout.read().range(191, 179);
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_12() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_12 = in_V_dout.read().range(207, 195);
    } else {
        ap_return_12 = ap_return_12_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_13() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_13 = in_V_dout.read().range(223, 211);
    } else {
        ap_return_13 = ap_return_13_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_14() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_14 = in_V_dout.read().range(239, 227);
    } else {
        ap_return_14 = ap_return_14_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_15() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_15 = in_V_dout.read().range(255, 243);
    } else {
        ap_return_15 = ap_return_15_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_2 = in_V_dout.read().range(47, 35);
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_3 = in_V_dout.read().range(63, 51);
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_4 = in_V_dout.read().range(79, 67);
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_5 = in_V_dout.read().range(95, 83);
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_6 = in_V_dout.read().range(111, 99);
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_7 = in_V_dout.read().range(127, 115);
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_8 = in_V_dout.read().range(143, 131);
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_return_9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        ap_return_9 = in_V_dout.read().range(159, 147);
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void svm_classifier_Block_proc::thread_ap_sig_19() {
    ap_sig_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void svm_classifier_Block_proc::thread_ap_sig_54() {
    ap_sig_54 = (esl_seteq<1,1,1>(in_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void svm_classifier_Block_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void svm_classifier_Block_proc::thread_in_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        in_V_blk_n = in_V_empty_n.read();
    } else {
        in_V_blk_n = ap_const_logic_1;
    }
}

void svm_classifier_Block_proc::thread_in_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_54.read())) {
        in_V_read = ap_const_logic_1;
    } else {
        in_V_read = ap_const_logic_0;
    }
}

void svm_classifier_Block_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

