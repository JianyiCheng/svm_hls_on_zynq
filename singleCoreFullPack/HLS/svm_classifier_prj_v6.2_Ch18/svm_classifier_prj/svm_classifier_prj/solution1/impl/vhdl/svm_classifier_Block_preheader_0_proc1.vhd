-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svm_classifier_Block_preheader_0_proc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (17 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (17 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of svm_classifier_Block_preheader_0_proc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_E758 : STD_LOGIC_VECTOR (18 downto 0) := "0001110011101011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal tmp18_fu_175_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp18_reg_281 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_52 : BOOLEAN;
    signal tmp21_fu_199_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp21_reg_286 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp25_fu_247_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp25_reg_291 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_83 : BOOLEAN;
    signal tmp20_fu_169_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp19_fu_163_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp24_fu_187_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp23_fu_193_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp22_fu_181_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp28_fu_211_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp27_fu_205_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp32_fu_229_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp31_fu_235_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp30_fu_223_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp29_fu_241_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp26_fu_217_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_253_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_80_s_fu_257_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_fu_262_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_266_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_52))) then
                tmp18_reg_281 <= tmp18_fu_175_p2;
                tmp21_reg_286 <= tmp21_fu_199_p2;
                tmp25_reg_291 <= tmp25_fu_247_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_52)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_52)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_52_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_52 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_sig_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_83)
    begin
        if (ap_sig_83) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    out_r <= r_V_fu_266_p2(18 downto 18);

    out_r_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_80_s_fu_257_p2 <= std_logic_vector(unsigned(tmp25_reg_291) + unsigned(tmp_fu_253_p2));
    r_V_fu_266_p2 <= std_logic_vector(signed(tmp_15_fu_262_p1) + signed(ap_const_lv19_E758));
    tmp18_fu_175_p2 <= std_logic_vector(unsigned(tmp20_fu_169_p2) + unsigned(tmp19_fu_163_p2));
    tmp19_fu_163_p2 <= std_logic_vector(unsigned(p_read) + unsigned(p_read1));
    tmp20_fu_169_p2 <= std_logic_vector(unsigned(p_read2) + unsigned(p_read3));
    tmp21_fu_199_p2 <= std_logic_vector(unsigned(tmp23_fu_193_p2) + unsigned(tmp22_fu_181_p2));
    tmp22_fu_181_p2 <= std_logic_vector(unsigned(p_read4) + unsigned(p_read5));
    tmp23_fu_193_p2 <= std_logic_vector(unsigned(tmp24_fu_187_p2) + unsigned(p_read6));
    tmp24_fu_187_p2 <= std_logic_vector(unsigned(p_read7) + unsigned(p_read8));
    tmp25_fu_247_p2 <= std_logic_vector(unsigned(tmp29_fu_241_p2) + unsigned(tmp26_fu_217_p2));
    tmp26_fu_217_p2 <= std_logic_vector(unsigned(tmp28_fu_211_p2) + unsigned(tmp27_fu_205_p2));
    tmp27_fu_205_p2 <= std_logic_vector(unsigned(p_read9) + unsigned(p_read10));
    tmp28_fu_211_p2 <= std_logic_vector(unsigned(p_read11) + unsigned(p_read12));
    tmp29_fu_241_p2 <= std_logic_vector(unsigned(tmp31_fu_235_p2) + unsigned(tmp30_fu_223_p2));
    tmp30_fu_223_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(p_read14));
    tmp31_fu_235_p2 <= std_logic_vector(unsigned(tmp32_fu_229_p2) + unsigned(p_read15));
    tmp32_fu_229_p2 <= std_logic_vector(unsigned(p_read16) + unsigned(p_read17));
        tmp_15_fu_262_p1 <= std_logic_vector(resize(signed(p_Val2_80_s_fu_257_p2),19));

    tmp_fu_253_p2 <= std_logic_vector(unsigned(tmp21_reg_286) + unsigned(tmp18_reg_281));
end behav;
