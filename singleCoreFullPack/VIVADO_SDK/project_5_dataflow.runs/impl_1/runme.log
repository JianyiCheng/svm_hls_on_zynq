
*** Running vivado
    with args -log design_1_wrapper.vdi -applog -m64 -messageDb vivado.pb -mode batch -source design_1_wrapper.tcl -notrace


****** Vivado v2016.2 (64-bit)
  **** SW Build 1577090 on Thu Jun  2 16:32:40 MDT 2016
  **** IP Build 1577682 on Fri Jun  3 12:00:54 MDT 2016
    ** Copyright 1986-2016 Xilinx, Inc. All Rights Reserved.

source design_1_wrapper.tcl -notrace
Design is defaulting to srcset: sources_1
Design is defaulting to constrset: constrs_1
INFO: [Netlist 29-17] Analyzing 7486 Unisim elements for replacement
INFO: [Netlist 29-28] Unisim Transformation completed in 0 CPU seconds
INFO: [Project 1-479] Netlist was created with Vivado 2016.2
INFO: [Device 21-403] Loading part xc7z020clg484-1
INFO: [Project 1-570] Preparing netlist for logic optimization
Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_processing_system7_0_0/design_1_processing_system7_0_0.xdc] for cell 'design_1_i/processing_system7_0/inst'
Finished Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_processing_system7_0_0/design_1_processing_system7_0_0.xdc] for cell 'design_1_i/processing_system7_0/inst'
Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_rst_processing_system7_0_100M_0/design_1_rst_processing_system7_0_100M_0_board.xdc] for cell 'design_1_i/rst_processing_system7_0_100M/U0'
Finished Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_rst_processing_system7_0_100M_0/design_1_rst_processing_system7_0_100M_0_board.xdc] for cell 'design_1_i/rst_processing_system7_0_100M/U0'
Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_rst_processing_system7_0_100M_0/design_1_rst_processing_system7_0_100M_0.xdc] for cell 'design_1_i/rst_processing_system7_0_100M/U0'
Finished Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_rst_processing_system7_0_100M_0/design_1_rst_processing_system7_0_100M_0.xdc] for cell 'design_1_i/rst_processing_system7_0_100M/U0'
Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_ila_0_0/ila_v6_1/constraints/ila.xdc] for cell 'design_1_i/ila_0/inst'
Finished Parsing XDC File [h:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.srcs/sources_1/bd/design_1/ip/design_1_ila_0_0/ila_v6_1/constraints/ila.xdc] for cell 'design_1_i/ila_0/inst'
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Project 1-111] Unisim Transformation Summary:
  A total of 136 instances were transformed.
  CFGLUT5 => CFGLUT5 (SRLC32E, SRL16E): 136 instances

link_design: Time (s): cpu = 00:00:24 ; elapsed = 00:01:37 . Memory (MB): peak = 759.184 ; gain = 535.863
Command: opt_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command opt_design

Starting DRC Task
INFO: [DRC 23-27] Running DRC with 2 threads
INFO: [Project 1-461] DRC finished with 0 Errors
INFO: [Project 1-462] Please refer to the DRC report (report_drc) for more information.

Time (s): cpu = 00:00:01 ; elapsed = 00:00:00.569 . Memory (MB): peak = 759.184 ; gain = 0.000
INFO: [Timing 38-35] Done setting XDC timing constraints.

Starting Logic Optimization Task

Phase 1 Generate And Synthesize Debug Cores
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'h:/MATLAB/MATLAB_2/MATLAB/svm_classifier_prj_v6.2_Ch18/svm_classifier_prj_v6.2_Ch18/svm_classifier_prj/svm_classifier_prj/solution1/impl'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository 'C:/Xilinx/Vivado/2016.2/data/ip'.
INFO: [IP_Flow 19-3806] Processing IP xilinx.com:ip:xsdbm:1.1 for cell dbg_hub_CV.
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.163 . Memory (MB): peak = 1319.301 ; gain = 0.137
Phase 1 Generate And Synthesize Debug Cores | Checksum: 102e615c3

Time (s): cpu = 00:00:07 ; elapsed = 00:01:30 . Memory (MB): peak = 1319.344 ; gain = 42.457
Implement Debug Cores | Checksum: 1d35d621a

Phase 2 Retarget
INFO: [Opt 31-138] Pushed 1 inverter(s) to 13 load pin(s).
INFO: [Opt 31-49] Retargeted 0 cell(s).
Phase 2 Retarget | Checksum: 1f12a9e7b

Time (s): cpu = 00:00:19 ; elapsed = 00:01:41 . Memory (MB): peak = 1322.875 ; gain = 45.988

Phase 3 Constant Propagation
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Opt 31-10] Eliminated 28 cells.
Phase 3 Constant Propagation | Checksum: 1e6050f3a

Time (s): cpu = 00:00:25 ; elapsed = 00:01:47 . Memory (MB): peak = 1322.875 ; gain = 45.988

Phase 4 Sweep
INFO: [Opt 31-12] Eliminated 20689 unconnected nets.
INFO: [Opt 31-11] Eliminated 345 unconnected cells.
Phase 4 Sweep | Checksum: fc9514de

Time (s): cpu = 00:00:33 ; elapsed = 00:01:56 . Memory (MB): peak = 1322.875 ; gain = 45.988

Starting Connectivity Check Task

Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.238 . Memory (MB): peak = 1322.875 ; gain = 0.000
Ending Logic Optimization Task | Checksum: fc9514de

Time (s): cpu = 00:00:34 ; elapsed = 00:01:57 . Memory (MB): peak = 1322.875 ; gain = 45.988

Starting Power Optimization Task
INFO: [Pwropt 34-132] Skipping clock gating for clocks with a period < 2.00 ns.
INFO: [Timing 38-35] Done setting XDC timing constraints.
INFO: [Pwropt 34-9] Applying IDT optimizations ...
INFO: [Pwropt 34-10] Applying ODC optimizations ...
Running Vector-less Activity Propagation...

Finished Running Vector-less Activity Propagation


Starting PowerOpt Patch Enables Task
INFO: [Pwropt 34-162] WRITE_MODE attribute of 0 BRAM(s) out of a total of 129 has been updated to save power. Run report_power_opt to get a complete listing of the BRAMs updated.
INFO: [Pwropt 34-201] Structural ODC has moved 0 WE to EN ports
Number of BRAM Ports augmented: 253 newly gated: 0 Total Ports: 258
Number of Flops added for Enable Generation: 7

Ending PowerOpt Patch Enables Task | Checksum: 10aeedf28

Time (s): cpu = 00:00:01 ; elapsed = 00:00:00.510 . Memory (MB): peak = 1899.113 ; gain = 0.000
Ending Power Optimization Task | Checksum: 10aeedf28

Time (s): cpu = 00:00:39 ; elapsed = 00:00:22 . Memory (MB): peak = 1899.113 ; gain = 576.238
INFO: [Common 17-83] Releasing license: Implementation
32 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
opt_design completed successfully
opt_design: Time (s): cpu = 00:01:29 ; elapsed = 00:02:33 . Memory (MB): peak = 1899.113 ; gain = 1139.930
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:02 ; elapsed = 00:00:00.960 . Memory (MB): peak = 1899.113 ; gain = 0.000
write_checkpoint: Time (s): cpu = 00:00:21 ; elapsed = 00:00:20 . Memory (MB): peak = 1899.113 ; gain = 0.000
INFO: [DRC 23-27] Running DRC with 2 threads
INFO: [Coretcl 2-168] The results of DRC are in file H:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.runs/impl_1/design_1_wrapper_drc_opted.rpt.
INFO: [Chipscope 16-240] Debug cores have already been implemented
Command: place_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
INFO: [DRC 23-27] Running DRC with 2 threads
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.
Running DRC as a precondition to command place_design
INFO: [DRC 23-27] Running DRC with 2 threads
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.

Starting Placer Task
INFO: [Place 30-611] Multithreading enabled for place_design using a maximum of 2 CPUs

Phase 1 Placer Initialization
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.453 . Memory (MB): peak = 1899.113 ; gain = 0.000
INFO: [Timing 38-35] Done setting XDC timing constraints.
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.153 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.1 IO Placement/ Clock Placement/ Build Placer Device

Phase 1.1.1 ParallelPlaceIOClockAndInitTop

Phase 1.1.1.1 Pre-Place Cells
Phase 1.1.1.1 Pre-Place Cells | Checksum: 5b146555

Time (s): cpu = 00:00:09 ; elapsed = 00:00:09 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.1.1.2 Constructing HAPIClkRuleMgr
Phase 1.1.1.2 Constructing HAPIClkRuleMgr | Checksum: 5b146555

Time (s): cpu = 00:00:10 ; elapsed = 00:00:10 . Memory (MB): peak = 1899.113 ; gain = 0.000
WARNING: [Place 30-879] Found overlapping PBlocks. The use of overlapping PBlocks is not recommended as it may lead to legalization errors or unplaced instances.
WARNING: [Place 30-12] An IO Bus FIXED_IO_mio with more than one IO standard is found. Components associated with this bus are: 
	FIXED_IO_mio[53] of IOStandard LVCMOS18
	FIXED_IO_mio[52] of IOStandard LVCMOS18
	FIXED_IO_mio[51] of IOStandard LVCMOS18
	FIXED_IO_mio[50] of IOStandard LVCMOS18
	FIXED_IO_mio[49] of IOStandard LVCMOS18
	FIXED_IO_mio[48] of IOStandard LVCMOS18
	FIXED_IO_mio[47] of IOStandard LVCMOS18
	FIXED_IO_mio[46] of IOStandard LVCMOS18
	FIXED_IO_mio[45] of IOStandard LVCMOS18
	FIXED_IO_mio[44] of IOStandard LVCMOS18
	FIXED_IO_mio[43] of IOStandard LVCMOS18
	FIXED_IO_mio[42] of IOStandard LVCMOS18
	FIXED_IO_mio[41] of IOStandard LVCMOS18
	FIXED_IO_mio[40] of IOStandard LVCMOS18
	FIXED_IO_mio[39] of IOStandard LVCMOS18
	FIXED_IO_mio[38] of IOStandard LVCMOS18
	FIXED_IO_mio[37] of IOStandard LVCMOS18
	FIXED_IO_mio[36] of IOStandard LVCMOS18
	FIXED_IO_mio[35] of IOStandard LVCMOS18
	FIXED_IO_mio[34] of IOStandard LVCMOS18
	FIXED_IO_mio[33] of IOStandard LVCMOS18
	FIXED_IO_mio[32] of IOStandard LVCMOS18
	FIXED_IO_mio[31] of IOStandard LVCMOS18
	FIXED_IO_mio[30] of IOStandard LVCMOS18
	FIXED_IO_mio[29] of IOStandard LVCMOS18
	FIXED_IO_mio[28] of IOStandard LVCMOS18
	FIXED_IO_mio[27] of IOStandard LVCMOS18
	FIXED_IO_mio[26] of IOStandard LVCMOS18
	FIXED_IO_mio[25] of IOStandard LVCMOS18
	FIXED_IO_mio[24] of IOStandard LVCMOS18
	FIXED_IO_mio[23] of IOStandard LVCMOS18
	FIXED_IO_mio[22] of IOStandard LVCMOS18
	FIXED_IO_mio[21] of IOStandard LVCMOS18
	FIXED_IO_mio[20] of IOStandard LVCMOS18
	FIXED_IO_mio[19] of IOStandard LVCMOS18
	FIXED_IO_mio[18] of IOStandard LVCMOS18
	FIXED_IO_mio[17] of IOStandard LVCMOS18
	FIXED_IO_mio[16] of IOStandard LVCMOS18
	FIXED_IO_mio[15] of IOStandard LVCMOS33
	FIXED_IO_mio[14] of IOStandard LVCMOS33
	FIXED_IO_mio[13] of IOStandard LVCMOS33
	FIXED_IO_mio[12] of IOStandard LVCMOS33
	FIXED_IO_mio[11] of IOStandard LVCMOS33
	FIXED_IO_mio[10] of IOStandard LVCMOS33
	FIXED_IO_mio[9] of IOStandard LVCMOS33
	FIXED_IO_mio[8] of IOStandard LVCMOS33
	FIXED_IO_mio[7] of IOStandard LVCMOS33
	FIXED_IO_mio[6] of IOStandard LVCMOS33
	FIXED_IO_mio[5] of IOStandard LVCMOS33
	FIXED_IO_mio[4] of IOStandard LVCMOS33
	FIXED_IO_mio[3] of IOStandard LVCMOS33
	FIXED_IO_mio[2] of IOStandard LVCMOS33
	FIXED_IO_mio[1] of IOStandard LVCMOS33
	FIXED_IO_mio[0] of IOStandard LVCMOS33
INFO: [Timing 38-35] Done setting XDC timing constraints.

Phase 1.1.1.3 IO and Clk Clean Up

Phase 1.1.1.3.1 Constructing HAPIClkRuleMgr
Phase 1.1.1.3.1 Constructing HAPIClkRuleMgr | Checksum: 5b146555

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1.1.1.3 IO and Clk Clean Up | Checksum: 5b146555

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.1.1.4 Implementation Feasibility check On IDelay
Phase 1.1.1.4 Implementation Feasibility check On IDelay | Checksum: 5b146555

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.1.1.5 Commit IO Placement
Phase 1.1.1.5 Commit IO Placement | Checksum: 21b8695c

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1.1.1 ParallelPlaceIOClockAndInitTop | Checksum: 21b8695c

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1.1 IO Placement/ Clock Placement/ Build Placer Device | Checksum: 7e063c93

Time (s): cpu = 00:00:27 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.2 Build Placer Netlist Model

Phase 1.2.1 Place Init Design

Phase 1.2.1.1 Make Others
Phase 1.2.1.1 Make Others | Checksum: d9ce7715

Time (s): cpu = 00:00:29 ; elapsed = 00:00:29 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.2.1.2 Init Lut Pin Assignment
Phase 1.2.1.2 Init Lut Pin Assignment | Checksum: d9ce7715

Time (s): cpu = 00:00:31 ; elapsed = 00:00:30 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1.2.1 Place Init Design | Checksum: 144f6e541

Time (s): cpu = 00:00:55 ; elapsed = 00:00:46 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1.2 Build Placer Netlist Model | Checksum: 144f6e541

Time (s): cpu = 00:00:55 ; elapsed = 00:00:46 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 1.3 Constrain Clocks/Macros
Phase 1.3 Constrain Clocks/Macros | Checksum: 144f6e541

Time (s): cpu = 00:00:55 ; elapsed = 00:00:46 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 1 Placer Initialization | Checksum: 144f6e541

Time (s): cpu = 00:00:55 ; elapsed = 00:00:47 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 2 Global Placement
Phase 2 Global Placement | Checksum: ec0793cb

Time (s): cpu = 00:02:10 ; elapsed = 00:01:35 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3 Detail Placement

Phase 3.1 Commit Multi Column Macros
Phase 3.1 Commit Multi Column Macros | Checksum: ec0793cb

Time (s): cpu = 00:02:12 ; elapsed = 00:01:36 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.2 Commit Most Macros & LUTRAMs
Phase 3.2 Commit Most Macros & LUTRAMs | Checksum: 221b6ed3a

Time (s): cpu = 00:02:38 ; elapsed = 00:01:56 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.3 Area Swap Optimization
Phase 3.3 Area Swap Optimization | Checksum: 241dcddc5

Time (s): cpu = 00:02:40 ; elapsed = 00:01:57 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.4 updateClock Trees: DP
Phase 3.4 updateClock Trees: DP | Checksum: 241dcddc5

Time (s): cpu = 00:02:40 ; elapsed = 00:01:57 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.5 Timing Path Optimizer
Phase 3.5 Timing Path Optimizer | Checksum: 1feb59950

Time (s): cpu = 00:02:45 ; elapsed = 00:02:00 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.6 Fast Optimization
Phase 3.6 Fast Optimization | Checksum: 1800c1861

Time (s): cpu = 00:02:47 ; elapsed = 00:02:01 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.7 Small Shape Detail Placement
Phase 3.7 Small Shape Detail Placement | Checksum: 1cbc3fcb8

Time (s): cpu = 00:03:00 ; elapsed = 00:02:15 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.8 Re-assign LUT pins
Phase 3.8 Re-assign LUT pins | Checksum: 215150900

Time (s): cpu = 00:03:03 ; elapsed = 00:02:18 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.9 Pipeline Register Optimization
Phase 3.9 Pipeline Register Optimization | Checksum: 215150900

Time (s): cpu = 00:03:04 ; elapsed = 00:02:19 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 3.10 Fast Optimization
Phase 3.10 Fast Optimization | Checksum: dd81d2dd

Time (s): cpu = 00:03:13 ; elapsed = 00:02:24 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 3 Detail Placement | Checksum: dd81d2dd

Time (s): cpu = 00:03:14 ; elapsed = 00:02:25 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4 Post Placement Optimization and Clean-Up

Phase 4.1 Post Commit Optimization
INFO: [Timing 38-35] Done setting XDC timing constraints.

Phase 4.1.1 updateClock Trees: PCOPT
Phase 4.1.1 updateClock Trees: PCOPT | Checksum: 998b2bc5

Time (s): cpu = 00:03:35 ; elapsed = 00:02:39 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.1.2 Post Placement Optimization
INFO: [Place 30-746] Post Placement Timing Summary WNS=-0.469. For the most accurate timing information please run report_timing.
Phase 4.1.2 Post Placement Optimization | Checksum: 152011b22

Time (s): cpu = 00:03:47 ; elapsed = 00:02:51 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 4.1 Post Commit Optimization | Checksum: 152011b22

Time (s): cpu = 00:03:47 ; elapsed = 00:02:51 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.2 Sweep Clock Roots: Post-Placement
Phase 4.2 Sweep Clock Roots: Post-Placement | Checksum: 152011b22

Time (s): cpu = 00:03:48 ; elapsed = 00:02:52 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.3 Uram Pipeline Register Optimization
Phase 4.3 Uram Pipeline Register Optimization | Checksum: 152011b22

Time (s): cpu = 00:03:48 ; elapsed = 00:02:52 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.4 Post Placement Cleanup
Phase 4.4 Post Placement Cleanup | Checksum: 152011b22

Time (s): cpu = 00:03:49 ; elapsed = 00:02:53 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.5 Placer Reporting
Phase 4.5 Placer Reporting | Checksum: 152011b22

Time (s): cpu = 00:03:49 ; elapsed = 00:02:53 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 4.6 Final Placement Cleanup
Phase 4.6 Final Placement Cleanup | Checksum: 228ccc203

Time (s): cpu = 00:03:50 ; elapsed = 00:02:54 . Memory (MB): peak = 1899.113 ; gain = 0.000
Phase 4 Post Placement Optimization and Clean-Up | Checksum: 228ccc203

Time (s): cpu = 00:03:50 ; elapsed = 00:02:54 . Memory (MB): peak = 1899.113 ; gain = 0.000
Ending Placer Task | Checksum: 189db9d72

Time (s): cpu = 00:03:50 ; elapsed = 00:02:54 . Memory (MB): peak = 1899.113 ; gain = 0.000
INFO: [Common 17-83] Releasing license: Implementation
49 Infos, 2 Warnings, 0 Critical Warnings and 0 Errors encountered.
place_design completed successfully
place_design: Time (s): cpu = 00:03:57 ; elapsed = 00:02:58 . Memory (MB): peak = 1899.113 ; gain = 0.000
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:33 ; elapsed = 00:01:10 . Memory (MB): peak = 1899.113 ; gain = 0.000
write_checkpoint: Time (s): cpu = 00:00:36 ; elapsed = 00:01:26 . Memory (MB): peak = 1899.113 ; gain = 0.000
report_io: Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.119 . Memory (MB): peak = 1899.113 ; gain = 0.000
report_utilization: Time (s): cpu = 00:00:01 ; elapsed = 00:00:00.406 . Memory (MB): peak = 1899.113 ; gain = 0.000
report_control_sets: Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.137 . Memory (MB): peak = 1899.113 ; gain = 0.000
Command: route_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command route_design
INFO: [DRC 23-27] Running DRC with 2 threads
WARNING: [DRC 23-20] Rule violation (PLIO-7) Placement Constraints Check for IO constraints - An IO Bus FIXED_IO_mio[53:0] with more than one IO standard is found. Components associated with this bus are: LVCMOS18 (FIXED_IO_mio[53], FIXED_IO_mio[52], FIXED_IO_mio[51], FIXED_IO_mio[50], FIXED_IO_mio[49], FIXED_IO_mio[48], FIXED_IO_mio[47], FIXED_IO_mio[46], FIXED_IO_mio[45], FIXED_IO_mio[44], FIXED_IO_mio[43], FIXED_IO_mio[42], FIXED_IO_mio[41], FIXED_IO_mio[40], FIXED_IO_mio[39] (the first 15 of 38 listed)); LVCMOS33 (FIXED_IO_mio[15], FIXED_IO_mio[14], FIXED_IO_mio[13], FIXED_IO_mio[12], FIXED_IO_mio[11], FIXED_IO_mio[10], FIXED_IO_mio[9], FIXED_IO_mio[8], FIXED_IO_mio[7], FIXED_IO_mio[6], FIXED_IO_mio[5], FIXED_IO_mio[4], FIXED_IO_mio[3], FIXED_IO_mio[2], FIXED_IO_mio[1] (the first 15 of 16 listed)); 
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors, 1 Warnings
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.


Starting Routing Task
INFO: [Route 35-254] Multithreading enabled for route_design using a maximum of 2 CPUs
Checksum: PlaceDB: 911ca073 ConstDB: 0 ShapeSum: f8befcff RouteDB: 0

Phase 1 Build RT Design
Phase 1 Build RT Design | Checksum: 12d3617eb

Time (s): cpu = 00:00:37 ; elapsed = 00:00:24 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 2 Router Initialization

Phase 2.1 Create Timer
Phase 2.1 Create Timer | Checksum: 12d3617eb

Time (s): cpu = 00:00:38 ; elapsed = 00:00:25 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 2.2 Fix Topology Constraints
Phase 2.2 Fix Topology Constraints | Checksum: 12d3617eb

Time (s): cpu = 00:00:39 ; elapsed = 00:00:25 . Memory (MB): peak = 1899.113 ; gain = 0.000

Phase 2.3 Pre Route Cleanup
Phase 2.3 Pre Route Cleanup | Checksum: 12d3617eb

Time (s): cpu = 00:00:39 ; elapsed = 00:00:26 . Memory (MB): peak = 1899.113 ; gain = 0.000
 Number of Nodes with overlaps = 0

Phase 2.4 Update Timing
Phase 2.4 Update Timing | Checksum: 20d4be6b5

Time (s): cpu = 00:01:08 ; elapsed = 00:00:44 . Memory (MB): peak = 1899.113 ; gain = 0.000
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.374 | TNS=-8.434 | WHS=-0.207 | THS=-241.188|

Phase 2 Router Initialization | Checksum: 22517ddd4

Time (s): cpu = 00:01:20 ; elapsed = 00:00:52 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 3 Initial Routing
Phase 3 Initial Routing | Checksum: 18257310c

Time (s): cpu = 00:01:40 ; elapsed = 00:01:03 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 4 Rip-up And Reroute

Phase 4.1 Global Iteration 0
 Number of Nodes with overlaps = 13419
 Number of Nodes with overlaps = 2409
 Number of Nodes with overlaps = 427
 Number of Nodes with overlaps = 68
 Number of Nodes with overlaps = 1
 Number of Nodes with overlaps = 0

Phase 4.1.1 Update Timing
Phase 4.1.1 Update Timing | Checksum: 7ab87c03

Time (s): cpu = 00:03:01 ; elapsed = 00:01:48 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.512 | TNS=-19.889| WHS=N/A    | THS=N/A    |


Phase 4.1.2 GlobIterForTiming

Phase 4.1.2.1 Update Timing
Phase 4.1.2.1 Update Timing | Checksum: 26009a195

Time (s): cpu = 00:03:03 ; elapsed = 00:01:49 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 4.1.2.2 Fast Budgeting
Phase 4.1.2.2 Fast Budgeting | Checksum: 298e78188

Time (s): cpu = 00:03:07 ; elapsed = 00:01:53 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 4.1.2 GlobIterForTiming | Checksum: 20775a643

Time (s): cpu = 00:03:09 ; elapsed = 00:01:55 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 4.1 Global Iteration 0 | Checksum: 20775a643

Time (s): cpu = 00:03:09 ; elapsed = 00:01:55 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 4.2 Global Iteration 1
 Number of Nodes with overlaps = 1724
 Number of Nodes with overlaps = 510
 Number of Nodes with overlaps = 169
 Number of Nodes with overlaps = 41
 Number of Nodes with overlaps = 2
 Number of Nodes with overlaps = 0

Phase 4.2.1 Update Timing
Phase 4.2.1 Update Timing | Checksum: 1aafa7d6b

Time (s): cpu = 00:03:40 ; elapsed = 00:02:16 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.480 | TNS=-7.565 | WHS=N/A    | THS=N/A    |


Phase 4.2.2 GlobIterForTiming

Phase 4.2.2.1 Update Timing
Phase 4.2.2.1 Update Timing | Checksum: 1f150dd55

Time (s): cpu = 00:03:42 ; elapsed = 00:02:17 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 4.2.2.2 Fast Budgeting
Phase 4.2.2.2 Fast Budgeting | Checksum: 1d94e8eba

Time (s): cpu = 00:03:46 ; elapsed = 00:02:21 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 4.2.2 GlobIterForTiming | Checksum: 1685119cd

Time (s): cpu = 00:03:47 ; elapsed = 00:02:22 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 4.2 Global Iteration 1 | Checksum: 1685119cd

Time (s): cpu = 00:03:47 ; elapsed = 00:02:22 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 4.3 Global Iteration 2
 Number of Nodes with overlaps = 1215
 Number of Nodes with overlaps = 128
 Number of Nodes with overlaps = 12
 Number of Nodes with overlaps = 4
 Number of Nodes with overlaps = 0

Phase 4.3.1 Update Timing
Phase 4.3.1 Update Timing | Checksum: eec69060

Time (s): cpu = 00:04:00 ; elapsed = 00:02:32 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.479 | TNS=-4.822 | WHS=N/A    | THS=N/A    |

Phase 4.3 Global Iteration 2 | Checksum: 126aab04b

Time (s): cpu = 00:04:01 ; elapsed = 00:02:33 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 4 Rip-up And Reroute | Checksum: 126aab04b

Time (s): cpu = 00:04:01 ; elapsed = 00:02:33 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 5 Delay and Skew Optimization

Phase 5.1 Delay CleanUp

Phase 5.1.1 Update Timing
Phase 5.1.1 Update Timing | Checksum: 12cc5ab6d

Time (s): cpu = 00:04:05 ; elapsed = 00:02:35 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.465 | TNS=-3.331 | WHS=N/A    | THS=N/A    |

 Number of Nodes with overlaps = 0
Phase 5.1 Delay CleanUp | Checksum: 17eb9744f

Time (s): cpu = 00:04:06 ; elapsed = 00:02:36 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 5.2 Clock Skew Optimization
Phase 5.2 Clock Skew Optimization | Checksum: 17eb9744f

Time (s): cpu = 00:04:06 ; elapsed = 00:02:36 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 5 Delay and Skew Optimization | Checksum: 17eb9744f

Time (s): cpu = 00:04:06 ; elapsed = 00:02:36 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 6 Post Hold Fix

Phase 6.1 Hold Fix Iter

Phase 6.1.1 Update Timing
Phase 6.1.1 Update Timing | Checksum: 14391c2d2

Time (s): cpu = 00:04:10 ; elapsed = 00:02:39 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-416] Intermediate Timing Summary | WNS=-0.465 | TNS=-3.132 | WHS=0.041  | THS=0.000  |

Phase 6.1 Hold Fix Iter | Checksum: dcbe63e1

Time (s): cpu = 00:04:10 ; elapsed = 00:02:39 . Memory (MB): peak = 2133.164 ; gain = 234.051
Phase 6 Post Hold Fix | Checksum: dcbe63e1

Time (s): cpu = 00:04:11 ; elapsed = 00:02:39 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 7 Route finalize

Router Utilization Summary
  Global Vertical Routing Utilization    = 22.847 %
  Global Horizontal Routing Utilization  = 26.6313 %
  Routable Net Status*
  *Does not include unroutable nets such as driverless and loadless.
  Run report_route_status for detailed report.
  Number of Failed Nets               = 0
  Number of Unrouted Nets             = 0
  Number of Partially Routed Nets     = 0
  Number of Node Overlaps             = 0

Congestion Report
North Dir 1x1 Area, Max Cong = 88.2883%, Congestion bounded by tiles (Lower Left Tile -> Upper Right Tile):
   INT_R_X59Y48 -> INT_R_X59Y48
   INT_L_X62Y32 -> INT_L_X62Y32
South Dir 1x1 Area, Max Cong = 92.7928%, Congestion bounded by tiles (Lower Left Tile -> Upper Right Tile):
   INT_L_X36Y64 -> INT_L_X36Y64
   INT_L_X18Y49 -> INT_L_X18Y49
   INT_L_X62Y29 -> INT_L_X62Y29
East Dir 1x1 Area, Max Cong = 94.1176%, Congestion bounded by tiles (Lower Left Tile -> Upper Right Tile):
   INT_L_X56Y66 -> INT_L_X56Y66
   INT_R_X25Y60 -> INT_R_X25Y60
   INT_L_X38Y58 -> INT_L_X38Y58
   INT_R_X41Y58 -> INT_R_X41Y58
   INT_L_X22Y53 -> INT_L_X22Y53
West Dir 2x2 Area, Max Cong = 90.8088%, Congestion bounded by tiles (Lower Left Tile -> Upper Right Tile):
   INT_L_X16Y48 -> INT_R_X17Y49
   INT_L_X18Y48 -> INT_R_X19Y49
   INT_L_X18Y44 -> INT_R_X19Y45
Phase 7 Route finalize | Checksum: d528ad40

Time (s): cpu = 00:04:11 ; elapsed = 00:02:40 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 8 Verifying routed nets

 Verification completed successfully
Phase 8 Verifying routed nets | Checksum: d528ad40

Time (s): cpu = 00:04:12 ; elapsed = 00:02:40 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 9 Depositing Routes
Phase 9 Depositing Routes | Checksum: 5abfeb98

Time (s): cpu = 00:04:16 ; elapsed = 00:02:45 . Memory (MB): peak = 2133.164 ; gain = 234.051

Phase 10 Post Router Timing
INFO: [Route 35-57] Estimated Timing Summary | WNS=-0.465 | TNS=-3.132 | WHS=0.041  | THS=0.000  |

WARNING: [Route 35-328] Router estimated timing not met.
Resolution: For a complete and accurate timing signoff, report_timing_summary must be run after route_design. Alternatively, route_design can be run with the -timing_summary option to enable a complete timing signoff at the end of route_design.
Phase 10 Post Router Timing | Checksum: 5abfeb98

Time (s): cpu = 00:04:17 ; elapsed = 00:02:45 . Memory (MB): peak = 2133.164 ; gain = 234.051
INFO: [Route 35-16] Router Completed Successfully

Time (s): cpu = 00:04:17 ; elapsed = 00:02:45 . Memory (MB): peak = 2133.164 ; gain = 234.051

Routing Is Done.
INFO: [Common 17-83] Releasing license: Implementation
63 Infos, 4 Warnings, 0 Critical Warnings and 0 Errors encountered.
route_design completed successfully
route_design: Time (s): cpu = 00:04:24 ; elapsed = 00:02:49 . Memory (MB): peak = 2133.164 ; gain = 234.051
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:37 ; elapsed = 00:01:19 . Memory (MB): peak = 2133.164 ; gain = 0.000
write_checkpoint: Time (s): cpu = 00:00:41 ; elapsed = 00:01:39 . Memory (MB): peak = 2133.164 ; gain = 0.000
INFO: [DRC 23-27] Running DRC with 2 threads
INFO: [Coretcl 2-168] The results of DRC are in file H:/MATLAB/MATLAB_2/MATLAB/svm_vivado/project_5_dataflow/project_5_dataflow.runs/impl_1/design_1_wrapper_drc_routed.rpt.
report_drc: Time (s): cpu = 00:00:16 ; elapsed = 00:00:09 . Memory (MB): peak = 2133.164 ; gain = 0.000
INFO: [Timing 38-91] UpdateTimingParams: Speed grade: -1, Delay Type: min_max.
INFO: [Timing 38-191] Multithreading enabled for timing update using a maximum of 2 CPUs
CRITICAL WARNING: [Timing 38-282] The design failed to meet the timing requirements. Please see the timing summary report for details on the timing violations.
report_timing_summary: Time (s): cpu = 00:00:33 ; elapsed = 00:00:19 . Memory (MB): peak = 2133.164 ; gain = 0.000
Running Vector-less Activity Propagation...

Finished Running Vector-less Activity Propagation
report_power: Time (s): cpu = 00:00:21 ; elapsed = 00:00:18 . Memory (MB): peak = 2133.164 ; gain = 0.000
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command write_bitstream
INFO: [DRC 23-27] Running DRC with 2 threads
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U121/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U121/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U122/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U122/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U139/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U139/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U140/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U140/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U141/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U141/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U142/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U142/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U143/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U143/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U144/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U144/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U145/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U145/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U156/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U156/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U157/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U157/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U158/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U158/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U159/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U159/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U160/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U160/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U161/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U161/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U162/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U162/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U163/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U163/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U164/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U164/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U165/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U165/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U166/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U166/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U167/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U167/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U168/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U168/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U169/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U169/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U170/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U170/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U171/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U171/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U172/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U172/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U173/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U173/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U174/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U174/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U175/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U175/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U176/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U176/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U177/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U177/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U178/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U178/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U179/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U179/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U180/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U180/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U181/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U181/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U182/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U182/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U183/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U183/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U184/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U184/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U185/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U185/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U186/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U186/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U187/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U187/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U188/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U188/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U189/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U189/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U190/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U190/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U191/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U191/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U192/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U192/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U193/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U193/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U194/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U194/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U195/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U195/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U196/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U196/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U197/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U197/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U198/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U198/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U199/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U199/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U200/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U200/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U201/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U201/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U202/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U202/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U203/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U203/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U204/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U204/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U205/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U205/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U206/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U206/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U207/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U207/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U208/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U208/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U209/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U209/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U210/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U210/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U211/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U211/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U212/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U212/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U213/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U213/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U214/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U214/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U215/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U215/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U216/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U216/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U217/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U217/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U218/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_13s_15s_26_1_U218/svm_classifier_mul_mul_13s_15s_26_1_DSP48_1_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U101/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U101/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U102/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U102/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U103/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U103/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U104/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U104/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U105/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U105/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U106/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U106/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U107/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U107/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U108/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U108/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U109/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U109/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U110/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U110/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U111/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U111/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U112/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U112/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U113/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U113/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U114/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U114/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U115/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U115/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U116/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U116/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U117/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U117/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U118/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U118/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U119/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U119/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U120/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U120/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U123/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U123/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U124/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U124/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U125/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U125/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U126/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U126/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U127/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U127/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U128/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U128/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC 23-20] Rule violation (DPOP-2) MREG Output pipelining - DSP design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U129/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p multiplier stage design_1_i/svm_classifier_0/inst/svm_classifier_Loop_Sum_loop_proc1_U0/svm_classifier_mul_mul_15s_13s_26_1_U129/svm_classifier_mul_mul_15s_13s_26_1_DSP48_0_U/p/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
INFO: [Common 17-14] Message 'DRC 23-20' appears 100 times and further instances of the messages will be disabled. Use the Tcl command set_msg_config to change the current settings.
INFO: [Vivado 12-3199] DRC finished with 0 Errors, 216 Warnings
INFO: [Vivado 12-3200] Please refer to the DRC report (report_drc) for more information.
INFO: [Designutils 20-2272] Running write_bitstream with 2 threads.
Loading data files...
Loading site data...
Loading route data...
Processing options...
Creating bitmap...
Creating bitstream...
Writing bitstream ./design_1_wrapper.bit...
INFO: [Vivado 12-1842] Bitgen Completed Successfully.
INFO: [Common 17-83] Releasing license: Implementation
write_bitstream: Time (s): cpu = 00:00:53 ; elapsed = 00:00:38 . Memory (MB): peak = 2325.766 ; gain = 192.602
INFO: [Common 17-206] Exiting Vivado at Sun Mar 11 21:07:54 2018...
