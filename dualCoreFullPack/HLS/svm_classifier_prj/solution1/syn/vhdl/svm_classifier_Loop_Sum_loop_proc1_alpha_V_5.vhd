-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_classifier_Loop_Sum_loop_proc1_alpha_V_5_rom is 
    generic(
             dwidth     : integer := 13; 
             awidth     : integer := 7; 
             mem_size    : integer := 117
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of svm_classifier_Loop_Sum_loop_proc1_alpha_V_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "1001011111110", 1 to 3=> "0000010000101", 4 => "1101011001100", 
    5 => "1111011110101", 6 to 7=> "0000010000101", 8 => "1101011001100", 
    9 to 10=> "0000010000101", 11 => "1110111101011", 12 to 13=> "0000010000101", 
    14 => "1111101111010", 15 => "1110111101011", 16 to 30=> "0000010000101", 
    31 => "1111001110000", 32 to 34=> "0000010000101", 35 => "1101101010001", 
    36 to 42=> "0000010000101", 43 => "1111101111010", 44 to 46=> "0000010000101", 
    47 => "1111101111010", 48 to 58=> "0000010000101", 59 => "1111011110101", 
    60 to 71=> "0000010000101", 72 => "1111011110101", 73 => "0000010000101", 
    74 => "1111101111010", 75 => "0000010000101", 76 => "1111101111010", 
    77 to 78=> "0000010000101", 79 => "1111001110000", 80 to 88=> "0000010000101", 
    89 => "1111101111010", 90 to 94=> "0000010000101", 95 => "1111101111010", 
    96 to 100=> "0000010000101", 101 => "1110111101011", 102 to 115=> "0000010000101", 
    116 => "1111101111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity svm_classifier_Loop_Sum_loop_proc1_alpha_V_5 is
    generic (
        DataWidth : INTEGER := 13;
        AddressRange : INTEGER := 117;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of svm_classifier_Loop_Sum_loop_proc1_alpha_V_5 is
    component svm_classifier_Loop_Sum_loop_proc1_alpha_V_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    svm_classifier_Loop_Sum_loop_proc1_alpha_V_5_rom_U :  component svm_classifier_Loop_Sum_loop_proc1_alpha_V_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


