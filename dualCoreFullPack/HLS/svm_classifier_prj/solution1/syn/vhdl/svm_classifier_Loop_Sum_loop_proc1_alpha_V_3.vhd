-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity svm_classifier_Loop_Sum_loop_proc1_alpha_V_3_rom is 
    generic(
             dwidth     : integer := 13; 
             awidth     : integer := 7; 
             mem_size    : integer := 117
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of svm_classifier_Loop_Sum_loop_proc1_alpha_V_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "0000010000101", 2 => "1001011111110", 3 to 4=> "0000010000101", 
    5 => "1110111101011", 6 => "1111011110111", 7 to 26=> "0000010000101", 
    27 => "1101001000111", 28 to 34=> "0000010000101", 35 => "1110111101011", 
    36 to 39=> "0000010000101", 40 => "1110111101011", 41 to 43=> "0000010000101", 
    44 => "1111001110000", 45 to 46=> "0000010000101", 47 => "1110111101011", 
    48 to 82=> "0000010000101", 83 => "1111001110000", 84 to 93=> "0000010000101", 
    94 => "1001011111110", 95 to 101=> "0000010000101", 102 => "1111101111010", 
    103 to 104=> "0000010000101", 105 => "1111101111010", 106 to 108=> "0000010000101", 
    109 => "1111101111010", 110 => "0000010000101", 111 => "1111101111010", 
    112 => "1110101100110", 113 to 116=> "0000010000101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity svm_classifier_Loop_Sum_loop_proc1_alpha_V_3 is
    generic (
        DataWidth : INTEGER := 13;
        AddressRange : INTEGER := 117;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of svm_classifier_Loop_Sum_loop_proc1_alpha_V_3 is
    component svm_classifier_Loop_Sum_loop_proc1_alpha_V_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    svm_classifier_Loop_Sum_loop_proc1_alpha_V_3_rom_U :  component svm_classifier_Loop_Sum_loop_proc1_alpha_V_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


