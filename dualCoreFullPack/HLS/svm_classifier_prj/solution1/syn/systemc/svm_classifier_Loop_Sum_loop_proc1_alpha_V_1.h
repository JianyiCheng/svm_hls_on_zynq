// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_H__
#define __svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 13;
  static const unsigned AddressRange = 117;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_ram) {
        ram[0] = "0b0000010000101";
        ram[1] = "0b0000010000101";
        ram[2] = "0b1111001110000";
        for (unsigned i = 3; i < 8 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[8] = "0b1111101111010";
        ram[9] = "0b0000010000101";
        ram[10] = "0b0000010000101";
        ram[11] = "0b1110101100110";
        ram[12] = "0b1001011111110";
        ram[13] = "0b1011010100011";
        ram[14] = "0b1001011111110";
        for (unsigned i = 15; i < 27 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[27] = "0b1101011001100";
        ram[28] = "0b0000010000101";
        ram[29] = "0b0000010000101";
        ram[30] = "0b1111101111010";
        ram[31] = "0b0000010000101";
        ram[32] = "0b1100100111101";
        ram[33] = "0b0000010000101";
        ram[34] = "0b0000010000101";
        ram[35] = "0b1111011110101";
        ram[36] = "0b0000010000101";
        ram[37] = "0b0000010000101";
        ram[38] = "0b1111101111010";
        for (unsigned i = 39; i < 46 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[46] = "0b1111101111010";
        ram[47] = "0b1111001110000";
        for (unsigned i = 48; i < 69 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[69] = "0b1111011110101";
        ram[70] = "0b1111101111010";
        for (unsigned i = 71; i < 76 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[76] = "0b1111101111010";
        ram[77] = "0b0000010000101";
        ram[78] = "0b0000010000101";
        ram[79] = "0b0000010000101";
        ram[80] = "0b1111101111010";
        ram[81] = "0b0000010000101";
        ram[82] = "0b0000010000101";
        ram[83] = "0b0000010000101";
        ram[84] = "0b1111101111010";
        for (unsigned i = 85; i < 112 ; i = i + 1) {
            ram[i] = "0b0000010000101";
        }
        ram[112] = "0b1111101111010";
        ram[113] = "0b1101111010111";
        ram[114] = "0b0000010000101";
        ram[115] = "0b1111101111010";
        ram[116] = "0b0000010000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(svm_classifier_Loop_Sum_loop_proc1_alpha_V_1) {


static const unsigned DataWidth = 13;
static const unsigned AddressRange = 117;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_ram* meminst;


SC_CTOR(svm_classifier_Loop_Sum_loop_proc1_alpha_V_1) {
meminst = new svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_ram("svm_classifier_Loop_Sum_loop_proc1_alpha_V_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~svm_classifier_Loop_Sum_loop_proc1_alpha_V_1() {
    delete meminst;
}


};//endmodule
#endif
