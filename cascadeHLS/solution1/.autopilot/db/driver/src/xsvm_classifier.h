// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSVM_CLASSIFIER_H
#define XSVM_CLASSIFIER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsvm_classifier_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XSvm_classifier_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XSvm_classifier;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
} XSvm_classifier_In_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSvm_classifier_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSvm_classifier_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSvm_classifier_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSvm_classifier_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSvm_classifier_Initialize(XSvm_classifier *InstancePtr, u16 DeviceId);
XSvm_classifier_Config* XSvm_classifier_LookupConfig(u16 DeviceId);
int XSvm_classifier_CfgInitialize(XSvm_classifier *InstancePtr, XSvm_classifier_Config *ConfigPtr);
#else
int XSvm_classifier_Initialize(XSvm_classifier *InstancePtr, const char* InstanceName);
int XSvm_classifier_Release(XSvm_classifier *InstancePtr);
#endif

void XSvm_classifier_Start(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_IsDone(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_IsIdle(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_IsReady(XSvm_classifier *InstancePtr);
void XSvm_classifier_EnableAutoRestart(XSvm_classifier *InstancePtr);
void XSvm_classifier_DisableAutoRestart(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_Get_return(XSvm_classifier *InstancePtr);

void XSvm_classifier_Set_in_V(XSvm_classifier *InstancePtr, XSvm_classifier_In_v Data);
XSvm_classifier_In_v XSvm_classifier_Get_in_V(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_Get_lp_count(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_Get_lp_count_vld(XSvm_classifier *InstancePtr);

void XSvm_classifier_InterruptGlobalEnable(XSvm_classifier *InstancePtr);
void XSvm_classifier_InterruptGlobalDisable(XSvm_classifier *InstancePtr);
void XSvm_classifier_InterruptEnable(XSvm_classifier *InstancePtr, u32 Mask);
void XSvm_classifier_InterruptDisable(XSvm_classifier *InstancePtr, u32 Mask);
void XSvm_classifier_InterruptClear(XSvm_classifier *InstancePtr, u32 Mask);
u32 XSvm_classifier_InterruptGetEnabled(XSvm_classifier *InstancePtr);
u32 XSvm_classifier_InterruptGetStatus(XSvm_classifier *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
